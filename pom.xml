<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>ch.evolutionsoft</groupId>
	<artifactId>ch.evolutionsoft.rl.alphazero</artifactId>
	<version>1.1.1</version>
	<packaging>pom</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>8</java.version>
		<nd4j.version>1.0.0-beta7</nd4j.version>
		<dl4j.version>1.0.0-beta7</dl4j.version>
		<datavec.version>1.0.0-beta7</datavec.version>
		<nd4j.backend.linux>linux-x86_64-avx2</nd4j.backend.linux>
		<nd4j.backend.windows>windows-x86_64-avx2</nd4j.backend.windows>
	    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.language>java</sonar.language>
		<sonar.coverage.jacoco.xmlReportPaths>target/site/jacoco/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
	</properties>

	<profiles>

		<profile>
			<id>generic</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<dependencyManagement>
				<dependencies>
					<!-- ND4J backend. You need one in every DL4J project. Normally define 
						artifactId as either "nd4j-native-platform" or "nd4j-cuda-7.5-platform" -->
					<dependency>
						<groupId>org.nd4j</groupId>
						<artifactId>nd4j-native-platform</artifactId>
						<version>${nd4j.version}</version>
					</dependency>
				</dependencies>
			</dependencyManagement>
		</profile>

		<profile>
			<id>linux-avx</id>
			<activation>
				<property>
					<name>avx</name>
					<value>linux</value>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.nd4j</groupId>
					<artifactId>nd4j-native-platform</artifactId>
					<version>${nd4j.version}</version>
				</dependency>
				<dependency>
					<groupId>org.nd4j</groupId>
					<artifactId>nd4j-native</artifactId>
					<version>${nd4j.version}</version>
					<classifier>${nd4j.backend.linux}</classifier>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<id>windows-avx</id>
			<activation>
				<property>
					<name>avx</name>
					<value>windows</value>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.nd4j</groupId>
					<artifactId>nd4j-native-platform</artifactId>
					<version>${nd4j.version}</version>
				</dependency>
				<dependency>
					<groupId>org.nd4j</groupId>
					<artifactId>nd4j-native</artifactId>
					<version>${nd4j.version}</version>
					<classifier>${nd4j.backend.windows}</classifier>
				</dependency>
			</dependencies>
		</profile>
	
	</profiles>
	
	<modules>
    	<module>alpha-zero-adversary-learning</module>
		<module>tic-tac-toe</module>
  	</modules>

	<dependencyManagement>
		<dependencies>
	
			<!-- Core DL4J functionality -->
			<dependency>
				<groupId>org.deeplearning4j</groupId>
				<artifactId>deeplearning4j-core</artifactId>
				<version>${dl4j.version}</version>
				<exclusions>
					<exclusion>
						<groupId>com.google.guava</groupId>
						<artifactId>guava</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.bytedeco.javacpp-presets</groupId>
						<artifactId>opencv</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.bytedeco.javacpp-presets</groupId>
						<artifactId>opencv-platform</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.freemarker</groupId>
						<artifactId>freemarker</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
	
			<dependency>
				<groupId>org.deeplearning4j</groupId>
				<artifactId>deeplearning4j-nn</artifactId>
				<version>${dl4j.version}</version>
			</dependency>
			
			<dependency>
				<groupId>org.deeplearning4j</groupId>
				<artifactId>deeplearning4j-ui</artifactId>
				<version>${dl4j.version}</version>
			</dependency>
	
			<dependency>
				<groupId>org.datavec</groupId>
				<artifactId>datavec-api</artifactId>
				<version>${datavec.version}</version>
				<exclusions>
					<exclusion>
						<groupId>com.google.guava</groupId>
						<artifactId>guava</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.freemarker</groupId>
						<artifactId>freemarker</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			
			<dependency>
			    <groupId>ch.qos.logback</groupId>
			    <artifactId>logback-classic</artifactId>
			    <version>1.2.3</version>
			</dependency>
	
		    <dependency>
		      <groupId>org.junit.jupiter</groupId>
		      <artifactId>junit-jupiter</artifactId>
		      <version>5.5.1</version>
		      <scope>test</scope>
		    </dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<pluginManagement>
			<plugins>
	
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.7.0</version>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.0.0-M5</version>
		        </plugin>	
	
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<configuration>
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
					</configuration>
					<executions>
						<execution>
							<id>make-assembly</id> <!-- this is used for inheritance merges -->
							<phase>package</phase> <!-- bind to the packaging phase -->
							<goals>
								<goal>single</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
	
			</plugins>
		</pluginManagement>
		
		<plugins>

				<plugin>
				    <groupId>org.jacoco</groupId>
				    <artifactId>jacoco-maven-plugin</artifactId>
				    <version>0.8.7</version>
				    <configuration>
				        <append>true</append>
				    </configuration>
				    <executions>
				        <execution>
				            <id>agent</id>
				            <goals>
				                <goal>prepare-agent</goal>
				            </goals>
				        </execution>
			            <execution>
			                <id>report</id>
			                <phase>test</phase>
			                <goals>
			                    <goal>report</goal>
			                </goals>
			            </execution>
				    </executions>
				</plugin>
		
		</plugins>
	</build>

</project>